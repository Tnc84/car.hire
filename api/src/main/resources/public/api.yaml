openapi: 3.0.1
info:
  title: Car Hire API
  version: 0.1.0
  contact:
    name: Tancau Bogdan
    email: tncbogdan@gmail.com
  description: Car hire API
servers:
  - url: 'http://localhost:{port}'
    description: local environment
    variables:
      port:
        default: '8080'
tags:
  - name: Sample
    description: User resource
paths:
  /users:
    get:
      tags:
        - user
      summary: Return a paginated list with the users
      description: Return a paginated list with the users
      operationId: getUsers
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      tags:
        - user
      summary: Add a new user
      operationId: addUser
      description: Add a new user and return it
      requestBody:
        description: The data of the user to insert
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /users/{id}:
    get:
      tags:
        - user
      summary: Return a user by id.
      description: Return a user by id.
      operationId: getUserById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: The id of user
          required: true
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - user
      summary: Delete a user by id
      description: Delete a user by id.
      operationId: deleteUser
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: The id of user
          required: true
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    patch:
      tags:
        - user
      summary: Update user
      description: Update a user’s details using a PATCH request
      operationId: patchUser
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: The id of user
          required: true
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /cars:
    post:
      tags:
        - car
      summary: Create a car
      description: Add a car to the fleet
      operationId: addCar
      requestBody:
        description: Payload of car, id attribute is ignored
        required : true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarDTO'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    get:
      tags:
        - car
      summary: Return a paginated list with the cars
      description: Return a paginated list with the cars
      operationId: getCars
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /cars/{id}:
    get:
      tags:
        - car
      summary: Return a car by id.
      description: Return a car by id
      operationId: getCarById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: The id of car
          required: true
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - car
      summary: Delete a car by id
      description: Delete a car by id. The id is an integer.
      operationId: deleteCar
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: The id of car
          required: true
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    patch:
      tags:
        - car
      summary: Update car
      description: Update a car’s details using a PATCH request
      operationId: patchCar
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: The id of car
          required: true
      requestBody:
        description: The data of the user to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarDTO'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /rentals:
    post:
      tags:
        - rental
      summary: Create a reservation
      description: Create a reservation
      operationId: addRental
      requestBody:
        description: Payload of rental
        required : true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RentalDTO'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RentalDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    get:
      tags:
        - rental
      summary: Return a paginated list with the rentals
      description: Return a paginated list with the rentals
      operationId: getRentals
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RentalDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /rentals/{id}:
    get:
      tags:
        - rental
      summary: Return a reservation by id.
      description: Return a reservation by id. The id is an integer.
      operationId: getRentalById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: The id of rental
          required: true
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RentalDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - rental
      summary: Cancel a rental by id
      description: Cancel a rental by id. The id is an integer.
      operationId: cancelRental
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: The id of rental
          required: true
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RentalDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    patch:
      tags:
        - rental
      summary: Update a reservation
      description: Update a reservation’s details using a PATCH request
      operationId: patchRental
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: The id of rental
          required: true
      requestBody:
        description: The data of the user to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RentalDTO'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RentalDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  responses:
    Created:
      description: the id of the created entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatedDTO'
    NotFound:
      description: the results are either empty or couldn't be found
    Unauthorized:
      description: unauthorized
    BadRequest:
      description: bad request
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ValidationDTO'
    ServerError:
      description: internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDTO'
  schemas:
    ValidationDTO:
      type: object
      properties:
        code:
          type: string
        field:
          type: string
        description:
          type: string
    ErrorDTO:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: user id
        email:
          type: string
          format: email
          example: tncbogdan@gmail.com
          description: user email address
        userName:
          type: string
          example: tnc
        password:
          type: string
          format: password
          example: secret
        firstName:
          type: string
          example: Bogdan
          description: the first name of the user
        lastName:
          type: string
          example: Tancau
          description: the last name of the user
        country:
          $ref: '#/components/schemas/CountryDTO'
        driverLicense:
          type: string
          example: IS1234
          description: the serie and number of the user's driver's license
        status:
          $ref: '#/components/schemas/UserStatus'

    CountryDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: country id
        name:
          type: string
          example: Romania
          description: the name of the country
        isoCode:
          type: string
          example: ROU
          description: the iso code of the country
    UserStatus:
      type: string
      enum:
        - ACTIVE
        - DELETED

    CarDTO:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int32
        make:
          type: string
        model:
          type: string
        year:
          type: integer
          format: int32
        mileage:
          type: integer
          format: int32
        fuel:
          type: string
        carClazz:
          type: string
        status:
          type: string
          enum: [ACTIVE, DELETED]

    RentalDTO:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int32
        userId:
          type: integer
          format: int32
        carId:
          type: integer
          format: int32
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [ACTIVE, CANCELLED]

    CreatedDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: the id of the created entity
  securitySchemes:
    oAuth:
      type: oauth2
      description: This API uses OAuth2 with the password flow
      flows:
        password:
          tokenUrl: /oauth/token
          scopes:
            read: get information from the API
            write: use the API to make changes to the supporting data model
