openapi: 3.0.1
info:
  title: User Management API
  version: 1.0.0
  contact:
    name: Tancau Bogdan
    email: tncbogdan@gmail.com
  description: This is the user management api
servers:
  - url: 'http://localhost:{port}'
    description: local environment
    variables:
      port:
        default: '8080'
  - url: 'https://devserver.domain.com/{custom-base-path}'
    description: dev environment
    variables:
      custom-base-path:
        default: user
tags:
  - name: user
    description: User resource
paths:
  /user:
    get:
      tags:
        - user
      summary: get all users
      operationId: getUsers
      description: Return a list of all users
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - user
      summary: Add a new user
      operationId: addUser
      description: Add a new user and return it
      requestBody:
        description: The data of the user to insert
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '201':
          description: created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      tags:
        - user
      summary: update an existing user
      description: Updating the name of an existing user and return it
      operationId: updateUser
      requestBody:
        description: The data of the user to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '200':
          description: created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - user
      summary: patch fields from user
      description: Patch the fields of an existing user
      operationId: patchUser
      requestBody:
        description: The data of the user to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '200':
          description: created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  /user/{id}:
    get:
      tags:
        - user
      summary: get user by id
      description: return the user by id
      operationId: getUserById
      parameters:
        - in: path
          name: id
          description: user id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - user
      summary: removes a user
      description: deletes a user identified by id
      operationId: deleteUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: success
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
components:
  responses:
    Unauthorized:
      description: unauthorized
    BadRequest:
      description: bad request
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ValidationDTO'
    ServerError:
      description: internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDTO'
  schemas:
    ValidationDTO:
      type: object
      properties:
        code:
          type: string
        field:
          type: string
        description:
          type: string
    ErrorDTO:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    UserDTO:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int32
          description: id of the student
        email:
          type: string
          description: user email
        password:
          type: string
          description: user password
        username:
          type: string
          example: Tancau Bogdan
          description: full name of the user
        first name:
          type: string
        last name:
          type: string
        country:
          type: string
          description: country of rezidence
        driveer`s license:
          type: string
        status:
          type: string
          description: “Order Status”
          enum:
            - “ ACTIVE”
            - “DELETED”

